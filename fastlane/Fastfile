# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

# CONSTANTS
releaseNotesBodyHeader = "What's new in this release?"
releaseNotesSuffixHeader = "Have feedback?"
releaseNotesLocales = ["en-US", "en-GB", "en-CA"]
errorMessageCancelled = "Release cancelled ðŸ˜¢"
productionBranch = "main"
developmentBranch = "next"

before_all do
  ensure_git_branch(branch: developmentBranch) # ensure current branch is development
  #ensure_git_status_clean # ensure every local changes committed
  git_pull # pull down any changes on remote branch
end

platform :android do
  desc "Generate release notes for the Play Store"
  private_lane :release_notes_playstore do
    releaseNotesBody = File.read("../android/version/release-notes")
    releaseNotesSuffix = File.read("../android/version/release-notes-suffix")

    formatted = "#{releaseNotesBodyHeader}\n#{releaseNotesBody}\n#{releaseNotesSuffixHeader}\n#{releaseNotesSuffix}"
    UI.message("\n#{formatted}")
    formatted
  end

  desc "Update local changelist metadata"
  private_lane :update_fastlane_release_notes do
    releaseNotes = release_notes_playstore()

    current_version_code = gradle(task: '-q fastlaneVersionCode')

    UI.message("App version for fastlane is #{current_version_code}.\nRelease notes for Play Store:\n\n#{releaseNotes}")

    releaseNotesLocales.each do |locale|
      File.open("./metadata/android/#{locale}/changelogs/#{current_version_code}.txt", "w") do |file| file.write("#{releaseNotes}") end
    end
  end

  desc "Clean up local changelist metadata"
  private_lane :cleanup_fastlane_release_notes do
    current_version_code = gradle(task: '-q fastlaneVersionCode')

    releaseNotesLocales.each do |locale|
      sh("rm '../fastlane/metadata/android/#{locale}/changelogs/#{current_version_code}.txt'")
    end
  end

  desc "Determine release notes"
  private_lane :determine_release_notes do
    commits = changelog_from_git_commits(
      between: [last_git_tag, "HEAD"],
      pretty: "- %s",
      date_format: "short",
      match_lightweight_tag: false,
      merge_commit_filtering: "exclude_merges",
    )

    existingReleaseNotes = File.read("../android/version/release-notes")
    UI.important("Existing release notes:\n")
    UI.message("#{existingReleaseNotes}\n")
    choice = UI.select "What do you want to do for release notes?", ["KEEP EXISTING", "CUSTOM",
                                                                     "Bug fixes and other improvements"]

    rl = case choice
      when "KEEP EXISTING"
        existingReleaseNotes
      when "CUSTOM"
        prompt(text: "Release Notes: ", multi_line_end_keyword: "END")
      else
        choice
      end
  end

  # Note, this currently relies on having `git flow` tools installed. (brew install git-flow)
  # This dependency could be removed with a little more time to tidy up this script to do the branching/merging manually.
  desc "Create new release"
  lane :release do

    # determine release notes
    releaseNotes = determine_release_notes()

    # select a version number
    newVersion = prompt(text: "\nLast release was: #{last_git_tag}\nEnter New Version Number:")

    if UI.confirm("Are you sure you're happy with this release?\n\nVersion=#{newVersion}\nRelease Notes:\n#{releaseNotes}\n")

      UI.success "Creating release branch for release/#{newVersion}"

      sh "git flow release start #{newVersion}"

      # update new release
      File.open("../android/version/version.properties", "w") do |file|
        file.write("VERSION=#{newVersion}")
      end

      # update release notes
      File.open("../android/version/release-notes", "w") do |file|
        file.write("" "#{releaseNotes}" "")
      end

      if UI.confirm(text: "If you have any other changes to make to the release branch, do them now. Enter `y` when ready to create and push tags")
        git_commit(
          message: "Updated release notes and version number for new release - #{newVersion}",
          path: "*",
          allow_nothing_to_commit: true,
          skip_git_hooks: true,
        )

        sh "git flow release finish -mnFS '#{newVersion}' '#{newVersion}'"
        push_git_tags
        sh "git push origin #{productionBranch}"
        sh "git push origin #{developmentBranch}"

        UI.header("#{newVersion} tag has been successfully created. ðŸŽ‰")
      else
        UI.error errorMessageCancelled
      end
    else
      UI.error errorMessageCancelled
    end
  end

  desc "Build and Deploy to Internal App Sharing"
  lane :beta do

    # clear gradle cache
    gradle(task: "clean", project_dir: "./android/")

    # build
    gradle(task: "bundle", build_type: "Release", project_dir: "./android")

    # deploy
    upload_to_play_store_internal_app_sharing(aab: "./android/app/build/outputs/bundle/release/app-release.aab")
  end

  desc "Build and Deploy a new version to the Google Play"
  lane :production do

    # clear gradle cache
    gradle(task: "clean", project_dir: "./android/")

    # build
    gradle(task: "bundle", build_type: "Release", project_dir: "./android")

    # update release notes
    update_fastlane_release_notes()

    # deploy
    supply(track: "production", aab: "./android/app/build/outputs/bundle/release/app-release.aab", release_status: "draft")

    # remove release notes
    cleanup_fastlane_release_notes()
  end
end