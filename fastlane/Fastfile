before_all do
  # ensure current branch is main
  ensure_git_branch(branch: 'main')
  ensure_git_status_clean # ensure every local changes committed
  git_pull # pull down any changes on remote branch
end

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

platform :ios do
  desc "Determine a new version number by looking at Plist file"
  private_lane :update_version do
    app_store_version = get_app_store_version_number(bundle_id: "com.ridvanaltun.cardcollection")
    plist_version = get_version_number_from_plist(xcodeproj: "./ios/CardCollection.xcodeproj")
    if Gem::Version.new(plist_version.to_f) == Gem::Version.new(app_store_version.to_f)
      UI.message "bumping minor"
      increment_version_number_in_plist(xcodeproj: "./ios/CardCollection.xcodeproj", bump_type: "minor")
    else
      UI.message "bumping patch"
      increment_version_number_in_plist(xcodeproj: "./ios/CardCollection.xcodeproj", bump_type: "patch")
    end
  end

  desc "iOS build for beta track"
  private_lane :staging_build do
    increment_build_number_in_plist(xcodeproj: "./ios/CardCollection.xcodeproj", target: "CardCollection")
    gym(scheme: "CardCollection-staging", workspace: "./ios/CardCollection.xcworkspace")
  end

  desc "iOS build for release"
  private_lane :release_build do
    increment_build_number_in_plist(xcodeproj: "./ios/CardCollection.xcodeproj", target: "CardCollection")
    gym(scheme: "CardCollection-release", workspace: "./ios/CardCollection.xcworkspace")
  end

  desc "Push version changes to remote Git repository"
  private_lane :push_new_version do
    current_version = get_version_number(xcodeproj: "./ios/CardCollection.xcodeproj", target: "CardCollection")
    commit_version_bump(message: `build(ios): bump build to ${current_version}`)
    push_to_git_remote
  end

  desc "Push a new beta build to TestFlight"
  lane :beta do
    staging_build
    upload_to_testflight(
      username: "ridvanaltun@outlook.com", # come from Appfile already?
      app_identifier: "com.ridvanaltun.cardcollection",
    )
    push_new_version
  end

  desc "Deploy a new version to the App Store"
  lane :production do
    release_build
    push_new_version
  end
end

platform :android do
  desc "Push version changes to remote Git repository"
  private_lane :push_new_version do
    current_version = android_get_version_name(gradle_file: "./android/app/build.gradle")
    commit_version_bump(message: `build(android): bump build to ${current_version}`)
    push_to_git_remote
  end

  desc "Android build and release to Internal App Sharing (Beta Track)"
  lane :beta do
    increment_version_code(app_project_dir: "./android/app")
    gradle(task: "clean", project_dir: "./android/")
    gradle(task: "bundle", build_type: "Release", project_dir: "./android")
    supply(
      track: "beta",
      aab: "./android/app/build/outputs/bundle/release/app-release.aab",
      #mapping: {"#{ENV[PROGUARD_MAPPING_FILE]}"}
    )
    push_new_version
  end

  desc "Deploy a new version to the Google Play"
  lane :production do
    increment_version_code(app_project_dir: "./android/app")
    increment_version_name(app_project_dir: "./android/app", bump_type: "patch")
    gradle(task: "clean", project_dir: "./android/")
    gradle(task: "bundle", build_type: "Release", project_dir: "./android")
    supply(track: "production", aab: "./android/app/build/outputs/bundle/release/app-release.aab", release_status: "draft")
    push_new_version
  end
end

desc "Deploy a CodePush build to current version for iOS"
lane :codepush_ios do |options|
  codepush_target = "ridvaltun/CardCollection-iOS"
  codepush_channel = "Production"
  current_version = get_version_number(xcodeproj: "./ios/CardCollection.xcodeproj", target: "CardCollection")
  codepush(
    current_version: current_version,
    codepush_target: codepush_target,
    codepush_channel: codepush_channel,
    manditory: options[:manditory]
  )
end

desc "Deploy a CodePush build to current version for Android"
lane :codepush_android do |options|
  codepush_target = "ridvaltun/CardCollection-Android"
  codepush_channel = "Production"
  current_version = google_play_track_release_names
  codepush(
    current_version: current_version,
    codepush_target: codepush_target,
    codepush_channel: codepush_channel,
    manditory: options[:manditory]
  )
end

desc "Select a target version to distribute CodePush build"
private_lane :select_app_version do |options|
  current_version = options[:current_version]
  current_major = [current_version.split(".").first, "x", "x"].join(".")
  current_minor = current_version.split(".").slice(0, 2).push("x").join(".")
  target_version_label = UI.select("What version do you want to target?", [
    "All users",
    "Most recent major (#{current_major})",
    "Most recent minor (#{current_minor})",
    "Current version (#{current_version})",
  ])

  next "\"*\"" if target_version_label.match(/All/)
  next current_major if target_version_label.match(/major/)
  next current_minor if target_version_label.match(/minor/)

  current_version
end

desc "Select a platform to distribute CodePush build"
private_lane :select_app_platform do
  codepush_target_ios= "ridvaltun/CardCollection-iOS"
  codepush_target_android= "ridvaltun/CardCollection-Android"
  target_platform = UI.select("What platform do you want to target?", [
    "iOS",
    "Android",
  ])

  next codepush_target_ios if target_platform.match(/iOS/)
  next codepush_target_android if target_platform.match(/Android/)
end

desc "Select a channel to distribute CodePush build"
private_lane :select_app_channel do
  codepush_production= "Production"
  codepush_staging= "Staging"
  target_platform = UI.select("What channel do you want to target?", [
    "Production",
    "Staging",
  ])

  next codepush_production if target_platform.match(/Production/)
  next codepush_staging if target_platform.match(/Staging/)
end

desc "Distribute a CodePush build"
lane :codepush do |options|
  codepush_target = !!options[:codepush_target]
  codepush_channel = !!options[:codepush_channel]
  manditory = !!options[:manditory]
  manditory_string = manditory ? " -m" : ""
  version = select_app_version(current_version: options[:current_version])
  platform = codepush_target ? options[:codepush_target] : select_app_platform()
  channel = codepush_channel ? options[:codepush_channel] : select_app_channel()

  if UI.confirm("Going to CodePush #{version} to production. Feeling lucky punk?")
    Dir.chdir("..") do
      sh "appcenter codepush release-react -a #{platform} -d #{channel} -t #{version}#{maditory_string} --output-dir ./build" do |status, result, command|
        unless status.success?
          UI.error "Command #{command} failed with status #{status.exitstatus}"
        end
        UI.message "Finished! Check out the release on App center."
      end
    end
  else
    UI.error "Not going to push"
  end
end
